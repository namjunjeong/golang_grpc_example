// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.1
// source: clientstream.proto

package clientstream

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClientstreamClient is the client API for Clientstream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientstreamClient interface {
	Multiply(ctx context.Context, opts ...grpc.CallOption) (Clientstream_MultiplyClient, error)
}

type clientstreamClient struct {
	cc grpc.ClientConnInterface
}

func NewClientstreamClient(cc grpc.ClientConnInterface) ClientstreamClient {
	return &clientstreamClient{cc}
}

func (c *clientstreamClient) Multiply(ctx context.Context, opts ...grpc.CallOption) (Clientstream_MultiplyClient, error) {
	stream, err := c.cc.NewStream(ctx, &Clientstream_ServiceDesc.Streams[0], "/Clientstream/Multiply", opts...)
	if err != nil {
		return nil, err
	}
	x := &clientstreamMultiplyClient{stream}
	return x, nil
}

type Clientstream_MultiplyClient interface {
	Send(*Req) error
	CloseAndRecv() (*Res, error)
	grpc.ClientStream
}

type clientstreamMultiplyClient struct {
	grpc.ClientStream
}

func (x *clientstreamMultiplyClient) Send(m *Req) error {
	return x.ClientStream.SendMsg(m)
}

func (x *clientstreamMultiplyClient) CloseAndRecv() (*Res, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Res)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ClientstreamServer is the server API for Clientstream service.
// All implementations must embed UnimplementedClientstreamServer
// for forward compatibility
type ClientstreamServer interface {
	Multiply(Clientstream_MultiplyServer) error
	mustEmbedUnimplementedClientstreamServer()
}

// UnimplementedClientstreamServer must be embedded to have forward compatible implementations.
type UnimplementedClientstreamServer struct {
}

func (UnimplementedClientstreamServer) Multiply(Clientstream_MultiplyServer) error {
	return status.Errorf(codes.Unimplemented, "method Multiply not implemented")
}
func (UnimplementedClientstreamServer) mustEmbedUnimplementedClientstreamServer() {}

// UnsafeClientstreamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientstreamServer will
// result in compilation errors.
type UnsafeClientstreamServer interface {
	mustEmbedUnimplementedClientstreamServer()
}

func RegisterClientstreamServer(s grpc.ServiceRegistrar, srv ClientstreamServer) {
	s.RegisterService(&Clientstream_ServiceDesc, srv)
}

func _Clientstream_Multiply_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ClientstreamServer).Multiply(&clientstreamMultiplyServer{stream})
}

type Clientstream_MultiplyServer interface {
	SendAndClose(*Res) error
	Recv() (*Req, error)
	grpc.ServerStream
}

type clientstreamMultiplyServer struct {
	grpc.ServerStream
}

func (x *clientstreamMultiplyServer) SendAndClose(m *Res) error {
	return x.ServerStream.SendMsg(m)
}

func (x *clientstreamMultiplyServer) Recv() (*Req, error) {
	m := new(Req)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Clientstream_ServiceDesc is the grpc.ServiceDesc for Clientstream service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Clientstream_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Clientstream",
	HandlerType: (*ClientstreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Multiply",
			Handler:       _Clientstream_Multiply_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "clientstream.proto",
}
