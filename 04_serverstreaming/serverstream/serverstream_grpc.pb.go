// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.1
// source: serverstream.proto

package serverstream

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServerstreamClient is the client API for Serverstream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerstreamClient interface {
	Multiply(ctx context.Context, in *Req, opts ...grpc.CallOption) (Serverstream_MultiplyClient, error)
}

type serverstreamClient struct {
	cc grpc.ClientConnInterface
}

func NewServerstreamClient(cc grpc.ClientConnInterface) ServerstreamClient {
	return &serverstreamClient{cc}
}

func (c *serverstreamClient) Multiply(ctx context.Context, in *Req, opts ...grpc.CallOption) (Serverstream_MultiplyClient, error) {
	stream, err := c.cc.NewStream(ctx, &Serverstream_ServiceDesc.Streams[0], "/Serverstream/Multiply", opts...)
	if err != nil {
		return nil, err
	}
	x := &serverstreamMultiplyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Serverstream_MultiplyClient interface {
	Recv() (*Res, error)
	grpc.ClientStream
}

type serverstreamMultiplyClient struct {
	grpc.ClientStream
}

func (x *serverstreamMultiplyClient) Recv() (*Res, error) {
	m := new(Res)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServerstreamServer is the server API for Serverstream service.
// All implementations must embed UnimplementedServerstreamServer
// for forward compatibility
type ServerstreamServer interface {
	Multiply(*Req, Serverstream_MultiplyServer) error
	mustEmbedUnimplementedServerstreamServer()
}

// UnimplementedServerstreamServer must be embedded to have forward compatible implementations.
type UnimplementedServerstreamServer struct {
}

func (UnimplementedServerstreamServer) Multiply(*Req, Serverstream_MultiplyServer) error {
	return status.Errorf(codes.Unimplemented, "method Multiply not implemented")
}
func (UnimplementedServerstreamServer) mustEmbedUnimplementedServerstreamServer() {}

// UnsafeServerstreamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerstreamServer will
// result in compilation errors.
type UnsafeServerstreamServer interface {
	mustEmbedUnimplementedServerstreamServer()
}

func RegisterServerstreamServer(s grpc.ServiceRegistrar, srv ServerstreamServer) {
	s.RegisterService(&Serverstream_ServiceDesc, srv)
}

func _Serverstream_Multiply_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Req)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServerstreamServer).Multiply(m, &serverstreamMultiplyServer{stream})
}

type Serverstream_MultiplyServer interface {
	Send(*Res) error
	grpc.ServerStream
}

type serverstreamMultiplyServer struct {
	grpc.ServerStream
}

func (x *serverstreamMultiplyServer) Send(m *Res) error {
	return x.ServerStream.SendMsg(m)
}

// Serverstream_ServiceDesc is the grpc.ServiceDesc for Serverstream service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Serverstream_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Serverstream",
	HandlerType: (*ServerstreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Multiply",
			Handler:       _Serverstream_Multiply_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "serverstream.proto",
}
