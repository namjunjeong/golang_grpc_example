// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.1
// source: bidirectional.proto

package bidirectional

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BidirectionalClient is the client API for Bidirectional service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BidirectionalClient interface {
	Multiply(ctx context.Context, opts ...grpc.CallOption) (Bidirectional_MultiplyClient, error)
}

type bidirectionalClient struct {
	cc grpc.ClientConnInterface
}

func NewBidirectionalClient(cc grpc.ClientConnInterface) BidirectionalClient {
	return &bidirectionalClient{cc}
}

func (c *bidirectionalClient) Multiply(ctx context.Context, opts ...grpc.CallOption) (Bidirectional_MultiplyClient, error) {
	stream, err := c.cc.NewStream(ctx, &Bidirectional_ServiceDesc.Streams[0], "/Bidirectional/Multiply", opts...)
	if err != nil {
		return nil, err
	}
	x := &bidirectionalMultiplyClient{stream}
	return x, nil
}

type Bidirectional_MultiplyClient interface {
	Send(*Req) error
	Recv() (*Res, error)
	grpc.ClientStream
}

type bidirectionalMultiplyClient struct {
	grpc.ClientStream
}

func (x *bidirectionalMultiplyClient) Send(m *Req) error {
	return x.ClientStream.SendMsg(m)
}

func (x *bidirectionalMultiplyClient) Recv() (*Res, error) {
	m := new(Res)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BidirectionalServer is the server API for Bidirectional service.
// All implementations must embed UnimplementedBidirectionalServer
// for forward compatibility
type BidirectionalServer interface {
	Multiply(Bidirectional_MultiplyServer) error
	mustEmbedUnimplementedBidirectionalServer()
}

// UnimplementedBidirectionalServer must be embedded to have forward compatible implementations.
type UnimplementedBidirectionalServer struct {
}

func (UnimplementedBidirectionalServer) Multiply(Bidirectional_MultiplyServer) error {
	return status.Errorf(codes.Unimplemented, "method Multiply not implemented")
}
func (UnimplementedBidirectionalServer) mustEmbedUnimplementedBidirectionalServer() {}

// UnsafeBidirectionalServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BidirectionalServer will
// result in compilation errors.
type UnsafeBidirectionalServer interface {
	mustEmbedUnimplementedBidirectionalServer()
}

func RegisterBidirectionalServer(s grpc.ServiceRegistrar, srv BidirectionalServer) {
	s.RegisterService(&Bidirectional_ServiceDesc, srv)
}

func _Bidirectional_Multiply_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BidirectionalServer).Multiply(&bidirectionalMultiplyServer{stream})
}

type Bidirectional_MultiplyServer interface {
	Send(*Res) error
	Recv() (*Req, error)
	grpc.ServerStream
}

type bidirectionalMultiplyServer struct {
	grpc.ServerStream
}

func (x *bidirectionalMultiplyServer) Send(m *Res) error {
	return x.ServerStream.SendMsg(m)
}

func (x *bidirectionalMultiplyServer) Recv() (*Req, error) {
	m := new(Req)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Bidirectional_ServiceDesc is the grpc.ServiceDesc for Bidirectional service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bidirectional_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Bidirectional",
	HandlerType: (*BidirectionalServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Multiply",
			Handler:       _Bidirectional_Multiply_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "bidirectional.proto",
}
